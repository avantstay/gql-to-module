const globWatch = require('glob-watcher')
const glob = require('glob')
const fs = require('fs')
const path = require('path')

module.exports = (input, { es6, watch, extension = 'js' }) => {
  const cleanExtension = extension.replace(/^\./,'')
  const patterns = input.length
    ? input
    : ['./src/**/*.graphql', './src/**/*.gql']

  const generateModule = it => {
    const fileContent = fs.readFileSync(it, { encoding: 'utf8' })
    const outputPath = path.resolve(it.replace(/(\.g(raph)?ql)$/, `$1.${cleanExtension}`))

    const initialComment = `/* tslint:disable */\n/* Generated automatically. Do not edit this file. */\n`
    const outputContent = es6
      ? `${initialComment}export default \`${fileContent}\`;`
      : `${initialComment}module.exports = \`${fileContent}\`;`

    const outputFileExists = fs.existsSync(outputPath)

    fs.writeFileSync(outputPath, outputContent, { encoding: 'utf8' })

    console.log(outputFileExists
      ? `Updated ${outputPath}`
      : `Generated ${outputPath}`)
  }

  patterns.forEach(p => {
    glob(p, (err, files) => {
      if (err) {
        console.error(err)
        process.exit(1)
      }

      files.forEach(generateModule)
    })
  })

  if (watch) {
    const watcher = globWatch(patterns)
    watcher.on('change', generateModule)
    watcher.on('add', generateModule)
  }
}